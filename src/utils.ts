import * as vscode from "vscode";
import { VastInstance } from "./vastApi";
import * as fs from "fs";
import * as os from "os";
import * as path from "path";

/**
 * Gets the path to the user's SSH config file
 */
function getSshConfigPath(): string {
  const homeDir = os.homedir();
  return path.join(homeDir, ".ssh", "config");
}

/**
 * Creates an SSH config entry for a VAST instance
 */
export function createSshConfig(
  instance: VastInstance,
  privateKeyPath: string
): string {
  // Escape backslashes and wrap in quotes
  const escapedPath = privateKeyPath.replace(/\\/g, "\\\\");
  // For some reason, this is the wrong port?
  //const hostname = instance.ssh_host;
  //const port = instance.ssh_port;
  const hostname = instance.public_ipaddr;
  const port = instance.ports["22/tcp"][0].HostPort;
  return (
    `# Generated by remote-vast-extension
Host vast-${instance.id}
  HostName ${hostname}
  Port ${port}
  User root
  IdentityFile "${escapedPath}"
  StrictHostKeyChecking no` +
    "\n" +
    JSON.stringify(instance)
  );
}

/**
 * Updates the SSH config file with VAST instance configurations
 */
export async function updateSshConfig(
  context: vscode.ExtensionContext,
  instances: VastInstance[],
  privateKeyPath: string
): Promise<void> {
  const sshConfigPath = getSshConfigPath();

  // Read existing config
  let existingConfig = "";
  if (fs.existsSync(sshConfigPath)) {
    existingConfig = fs.readFileSync(sshConfigPath, "utf8");
  }

  // Remove existing vast- entries
  const lines = existingConfig.split("\n");
  const filteredLines = [];
  let skipNextLines = false;

  for (const line of lines) {
    if (line.trim().startsWith("Host vast-")) {
      skipNextLines = true;
      continue;
    }
    if (skipNextLines) {
      if (line.trim() === "") {
        skipNextLines = false;
      }
      continue;
    }
    filteredLines.push(line);
  }

  // Add new vast- entries
  const newConfig = filteredLines.join("\n").trim();
  const vastConfigs = instances
    .map((instance) => createSshConfig(instance, privateKeyPath))
    .join("\n\n");

  const finalConfig = newConfig + (newConfig ? "\n\n" : "") + vastConfigs;

  // Write updated config
  fs.writeFileSync(sshConfigPath, finalConfig);

  vscode.window.showInformationMessage("SSH config updated successfully");
}

/**
 * Saves SSH configuration for a VAST instance
 */
export async function saveSshConfig(
  context: vscode.ExtensionContext,
  instance: VastInstance,
  privateKeyPath: string
): Promise<void> {
  const sshConfig = createSshConfig(instance, privateKeyPath);

  // Save SSH config
  const sshConfigPath = vscode.Uri.joinPath(
    context.globalStorageUri,
    "vast-ssh-config"
  );
  await vscode.workspace.fs.writeFile(sshConfigPath, Buffer.from(sshConfig));
}

/**
 * Connects to a VAST instance using Remote-SSH
 */
export async function connectToInstance(instance: VastInstance): Promise<void> {
  await vscode.commands.executeCommand(
    "remote-ssh.connectToHost",
    `vast-${instance.id}`
  );
}
